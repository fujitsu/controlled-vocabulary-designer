"""
reference_vocabulary.py COPYRIGHT FUJITSU LIMITED 2021
"""
# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ReferenceVocabulary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, term: str=None, preferred_label: str=None, language: str=None, uri: str=None, broader_uri: str=None, other_voc_syn_uri: str=None, term_description: str=None, created_time: str=None, modified_time: str=None, hidden: bool=None, postion_x: str=None, postion_y: str=None):  # noqa: E501
        """ReferenceVocabulary - a model defined in Swagger

        :param id: The id of this ReferenceVocabulary.  # noqa: E501
        :type id: int
        :param term: The term of this ReferenceVocabulary.  # noqa: E501
        :type term: str
        :param preferred_label: The preferred_label of this ReferenceVocabulary.  # noqa: E501
        :type preferred_label: str
        :param language: The language of this ReferenceVocabulary.  # noqa: E501
        :type language: str
        :param uri: The uri of this ReferenceVocabulary.  # noqa: E501
        :type uri: str
        :param broader_uri: The broader_uri of this ReferenceVocabulary.  # noqa: E501
        :type broader_uri: str
        :param other_voc_syn_uri: The other_voc_syn_uri of this ReferenceVocabulary.  # noqa: E501
        :type other_voc_syn_uri: str
        :param term_description: The term_description of this ReferenceVocabulary.  # noqa: E501
        :type term_description: str
        :param created_time: The created_time of this ReferenceVocabulary.  # noqa: E501
        :type created_time: str
        :param modified_time: The modified_time of this ReferenceVocabulary.  # noqa: E501
        :type modified_time: str
        :param hidden: The hidden of this ReferenceVocabulary.  # noqa: E501
        :type hidden: bool
        :param postion_x: The postion_x of this ReferenceVocabulary.  # noqa: E501
        :type postion_x: str
        :param postion_y: The postion_y of this ReferenceVocabulary.  # noqa: E501
        :type postion_y: str
        """
        self.swagger_types = {
            'id': int,
            'term': str,
            'preferred_label': str,
            'language': str,
            'uri': str,
            'broader_uri': str,
            'other_voc_syn_uri': str,
            'term_description': str,
            'created_time': str,
            'modified_time': str,
            'hidden': bool,
            'postion_x': str,
            'postion_y': str
        }

        self.attribute_map = {
            'id': 'id',
            'term': 'term',
            'preferred_label': 'preferred_label',
            'language': 'language',
            'uri': 'uri',
            'broader_uri': 'broader_uri',
            'other_voc_syn_uri': 'other_voc_syn_uri',
            'term_description': 'term_description',
            'created_time': 'created_time',
            'modified_time': 'modified_time',
            'hidden': 'hidden',
            'postion_x': 'postion_x',
            'postion_y': 'postion_y'
        }
        self._id = id
        self._term = term
        self._preferred_label = preferred_label
        self._language = language
        self._uri = uri
        self._broader_uri = broader_uri
        self._other_voc_syn_uri = other_voc_syn_uri
        self._term_description = term_description
        self._created_time = created_time
        self._modified_time = modified_time
        self._hidden = hidden
        self._postion_x = postion_x
        self._postion_y = postion_y

    @classmethod
    def from_dict(cls, dikt) -> 'ReferenceVocabulary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReferenceVocabulary of this ReferenceVocabulary.  # noqa: E501
        :rtype: ReferenceVocabulary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ReferenceVocabulary.


        :return: The id of this ReferenceVocabulary.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ReferenceVocabulary.


        :param id: The id of this ReferenceVocabulary.
        :type id: int
        """

        self._id = id

    @property
    def term(self) -> str:
        """Gets the term of this ReferenceVocabulary.


        :return: The term of this ReferenceVocabulary.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term: str):
        """Sets the term of this ReferenceVocabulary.


        :param term: The term of this ReferenceVocabulary.
        :type term: str
        """

        self._term = term

    @property
    def preferred_label(self) -> str:
        """Gets the preferred_label of this ReferenceVocabulary.


        :return: The preferred_label of this ReferenceVocabulary.
        :rtype: str
        """
        return self._preferred_label

    @preferred_label.setter
    def preferred_label(self, preferred_label: str):
        """Sets the preferred_label of this ReferenceVocabulary.


        :param preferred_label: The preferred_label of this ReferenceVocabulary.
        :type preferred_label: str
        """

        self._preferred_label = preferred_label
    
    @property
    def language(self) -> str:
        """Gets the language of this ReferenceVocabulary.


        :return: The language of this ReferenceVocabulary.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this ReferenceVocabulary.


        :param language: The language of this ReferenceVocabulary.
        :type language: str
        """

        self._language = language

    @property
    def uri(self) -> str:
        """Gets the uri of this ReferenceVocabulary.


        :return: The uri of this ReferenceVocabulary.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this ReferenceVocabulary.


        :param uri: The uri of this ReferenceVocabulary.
        :type uri: str
        """

        self._uri = uri

    @property
    def broader_uri(self) -> str:
        """Gets the broader_uri of this ReferenceVocabulary.


        :return: The broader_uri of this ReferenceVocabulary.
        :rtype: str
        """
        return self._broader_uri

    @broader_uri.setter
    def broader_uri(self, broader_uri: str):
        """Sets the broader_uri of this ReferenceVocabulary.


        :param broader_uri: The broader_uri of this ReferenceVocabulary.
        :type broader_uri: str
        """

        self._broader_uri = broader_uri
    
    @property
    def other_voc_syn_uri(self) -> str:
        """Gets the other_voc_syn_uri of this ReferenceVocabulary.


        :return: The other_voc_syn_uri of this ReferenceVocabulary.
        :rtype: str
        """
        return self._other_voc_syn_uri

    @other_voc_syn_uri.setter
    def other_voc_syn_uri(self, other_voc_syn_uri: str):
        """Sets the other_voc_syn_uri of this ReferenceVocabulary.


        :param other_voc_syn_uri: The other_voc_syn_uri of this ReferenceVocabulary.
        :type other_voc_syn_uri: str
        """

        self._other_voc_syn_uri = other_voc_syn_uri

    @property
    def term_description(self) -> str:
        """Gets the term_description of this ReferenceVocabulary.


        :return: The term_description of this ReferenceVocabulary.
        :rtype: str
        """
        return self._term_description

    @term_description.setter
    def term_description(self, term_description: str):
        """Sets the term_description of this ReferenceVocabulary.


        :param term_description: The term_description of this ReferenceVocabulary.
        :type term_description: str
        """

        self._term_description = term_description

    @property
    def created_time(self) -> str:
        """Gets the created_time of this ReferenceVocabulary.


        :return: The created_time of this ReferenceVocabulary.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time: str):
        """Sets the created_time of this ReferenceVocabulary.


        :param created_time: The created_time of this ReferenceVocabulary.
        :type created_time: str
        """

        self._created_time = created_time

    @property
    def modified_time(self) -> str:
        """Gets the modified_time of this ReferenceVocabulary.


        :return: The modified_time of this ReferenceVocabulary.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time: str):
        """Sets the modified_time of this ReferenceVocabulary.


        :param modified_time: The modified_time of this ReferenceVocabulary.
        :type modified_time: str
        """

        self._modified_time = modified_time

    @property
    def hidden(self) -> bool:
        """Gets the hidden of this ReferenceVocabulary.


        :return: The hidden of this ReferenceVocabulary.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden: bool):
        """Sets the hidden of this ReferenceVocabulary.


        :param hidden: The hidden of this ReferenceVocabulary.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def postion_x(self) -> str:
        """Gets the postion_x of this ReferenceVocabulary.


        :return: The postion_x of this ReferenceVocabulary.
        :rtype: str
        """
        return self._postion_x

    @postion_x.setter
    def postion_x(self, postion_x: str):
        """Sets the postion_x of this ReferenceVocabulary.


        :param postion_x: The postion_x of this ReferenceVocabulary.
        :type postion_x: str
        """

        self._postion_x = postion_x

    @property
    def postion_y(self) -> str:
        """Gets the postion_y of this ReferenceVocabulary.


        :return: The postion_y of this ReferenceVocabulary.
        :rtype: str
        """
        return self._postion_y

    @postion_y.setter
    def postion_y(self, postion_y: str):
        """Sets the postion_y of this ReferenceVocabulary.


        :param postion_y: The postion_y of this ReferenceVocabulary.
        :type postion_y: str
        """

        self._postion_y = postion_y
